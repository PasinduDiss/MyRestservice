service: MyRestservice

package:
  individually: true
  exclude:
    - ./**

provider:
      name: aws
      runtime: go1.x
      stage: dev
      region: ap-southeast-2

      environment:
        DEVICES_TABLE_NAME: ${self:custom.devicesTableName}
      iamRoleStatements: #Defines what other AWS services out lambda function can access
        - Effect: Allow # Allow access to DynamoDB tables
          Action:
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - ${self:custom.devicesTableArn}

functions:
  create:
    handler: ./bin/handlers/create
    package:
      include:
        - ./bin/handlers/create
    events:
      - http:
          path: /api/devices
          method: post
          cors: true
  list:
    handler: ./bin/handlers/list
    package:
      include:
        - ./bin/handlers/list
    events:
      - http:
          path: /api/devices
          method: get
          cors: true

custom:
  devicesTableName: Devices
  devicesTableArn:  #ARN are addresses of deployed services in AWS space
    Fn::Join:
      - ":"
      - - arn
        - aws
        - dynamodb
        - Ref: AWS::Region
        - Ref: AWS::AccountId
        - table/${self:custom.devicesTableName}

resource:
  Resource: #Supporting Aws services
    DevicesDynamoDBTable: #Define a new DynamoDB Table resource to store device info
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.devicesTableName}
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
